service: aws-rust

frameworkVersion: "3"

provider:
  name: aws
  runtime: rust
  region: us-east-1
  versionFunctions: false
  memorySize: 512
  logRetentionInDays: 14
  httpApi:
    cors: true
    payload: "2.0"
  environment:
    STAGE: ${opt:stage, "dev"}
    LOG_LEVEL: INFO
    DB_TABLE_NAME: ${construct:example-db.tableName}

functions:
  # v2 HTTP Api
  pong:
    handler: aws-rust.pong
    iamRoleStatements: []
    events:
      - httpApi:
          method: GET
          path: /api/pong
  # v1 REST Api
  ping:
    handler: aws-rust.ping
    iamRoleStatements: []
    events:
      - http:
          method: GET
          path: /api/ping
          private: true
          cors: true
  # Function Url
  dev-ping:
    handler: aws-rust.dev_ping
    iamRoleStatements: []
    url:
      cors: true
  # server entry point
  http:
    handler: aws-rust
    iamRoleStatements: []
    url:
      cors: true

custom:
  rust:
    target: x86_64-unknown-linux-musl
  apiKeys:
    - name: ${opt:stage}-free-tier-key
      usagePlan:
        name: ${opt:stage}-free-tier-key-plan
        description: "Free Tier Plan"
        quota:
          limit: 100
          period: DAY
        throttle:
          burstLimit: 10
          rateLimit: 20
    - name: ${opt:stage}-premium-tier-key
      usagePlan:
        name: ${opt:stage}-premium-tier-key-plan
        description: "Premium Tier Plan"
        quota:
          limit: 1000
          period: DAY
        throttle:
          burstLimit: 100
          rateLimit: 20

constructs:
  example-db:
    type: database/dynamodb-single-table

plugins:
  - serverless-rust
  - serverless-lift
  - serverless-add-api-key
  - serverless-iam-roles-per-function

package:
  individually: true
